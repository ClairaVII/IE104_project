document.addEventListener("DOMContentLoaded", function () {
    var chatMessages = document.getElementById("chat-messages");
    var userMessageInput = document.getElementById("user-message");
    var sendButton = document.getElementById("send-button");

    sendButton.addEventListener("click", sendMessage);
    userMessageInput.addEventListener("keydown", function (event) {
        if (event.key === "Enter") {
            sendMessage();
        }
    });

    function sendMessage() {
        var userMessage = userMessageInput.value;
        if (userMessage.trim() !== "") {
            appendUserMessage(userMessage);
            userMessageInput.value = "";
            simulateChatbotResponse(userMessage);
        }
    }

    function appendUserMessage(message) {
        var userMessageElement = document.createElement("div");
        userMessageElement.classList.add("user-message");
        userMessageElement.textContent = message;
        chatMessages.appendChild(userMessageElement);
    }

    function appendChatbotMessage(message) {
        var chatbotMessageElement = document.createElement("div");
        chatbotMessageElement.classList.add("chatbot-message");
        chatbotMessageElement.textContent = message;
        chatMessages.appendChild(chatbotMessageElement);
    }

    function simulateChatbotResponse(userMessage) {
        var chatbotMessage = "Hiney: " + userMessage;
        setTimeout(function () {
            appendChatbotMessage(chatbotMessage);
        }, 500); // ƒë·ªô tr·ªÖ tr∆∞·ªõc khi hi·ªÉn th·ªã ph·∫£n h·ªìi c·ªßa chatbot (ƒë∆°n v·ªã ms)
    }

    var closeButton = document.getElementById("close-button");
    closeButton.addEventListener("mouseenter", function () {
        closeButton.classList.add("hover-effect");
    });

    closeButton.addEventListener("mouseleave", function () {
        closeButton.classList.remove("hover-effect");
    });

    closeButton.addEventListener("click", function () {
        var chatContainer = document.getElementById("chat-container");
        chatContainer.style.display = "none";
    });
});

function reloadCoins() {
    // Your coin reload logic goes here
    alert('Coins reloaded!');
}

function shareUserInfo() {
    // Th√™m logic x·ª≠ l√Ω cho ch·ª©c nƒÉng chia s·∫ª th√¥ng tin
    alert('Th√¥ng tin ƒë√£ ƒë∆∞·ª£c chia s·∫ª!');
}

function toggleFollow() {
    // Th√™m logic x·ª≠ l√Ω cho ch·ª©c nƒÉng theo d√µi
    const followBtn = document.querySelector('.follow-btn');
    followBtn.classList.toggle('following'); // Thay ƒë·ªïi tr·∫°ng th√°i theo d√µi

    const followStatus = followBtn.classList.contains('following') ? 'ƒêang theo d√µi' : 'Theo d√µi';
    followBtn.innerText = followStatus;

    // C√≥ th·ªÉ th√™m th√™m logic nh∆∞ g·ª≠i y√™u c·∫ßu theo d√µi ƒë·∫øn server ·ªü ƒë√¢y
}

window.addEventListener('scroll', () => {
    const nav = document.querySelector('nav');
    const brand = document.querySelector('.brand h1');

    // Th√™m ho·∫∑c x√≥a l·ªõp scrolled khi cu·ªôn trang
    nav.classList.toggle('scrolled', window.scrollY > 0);
    brand.classList.toggle('scrolled', window.scrollY > 0);
});
function filterSkills() {
    const input = document.querySelector('.skills-list input');
    const filter = input.value.toLowerCase();
    const skills = document.querySelectorAll('.scrollable-skills p');

    skills.forEach(skill => {
        const skillText = skill.innerText.toLowerCase();
        skill.style.display = skillText.includes(filter) ? 'block' : 'none';
    });
}

function displayImage(imagePath) {
    // C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n ·∫£nh trong ph·∫ßn t·ª≠ hi·ªÉn th·ªã
    document.getElementById('selectedImage').src = imagePath;
}
function reloadCoins() {
    // Th√™m logic x·ª≠ l√Ω cho ch·ª©c nƒÉng n·∫°p xu
    alert('Coins reloaded!');
}
function placeOrder() {
    // Th√™m logic x·ª≠ l√Ω cho ch·ª©c nƒÉng ƒë·∫∑t ƒë∆°n
    // ·ªû ƒë√¢y, ch√∫ng ta s·∫Ω chuy·ªÉn h∆∞·ªõng sang trang web kh√°c
    window.location.href = 'Dat Don.html';
}
function openChat() {
    // Chuy·ªÉn sang trang chat.html
    window.location.href = "Chat.html";
}
function shareUserInfo() {
    // L·∫•y ID t·ª´ n∆°i b·∫°n l∆∞u tr·ªØ ID (trong tr∆∞·ªùng h·ª£p n√†y, t√¥i gi·∫£ s·ª≠ b·∫°n ƒë√£ c√≥ m·ªôt ph·∫ßn t·ª≠ v·ªõi ID 'userIdContainer')
    var userId = document.getElementById('userIdContainer').innerText;

    // G·ªçi h√†m ƒë·ªÉ sao ch√©p v√†o Clipboard
    copyToClipboard(userId);

    // Th√¥ng b√°o cho ng∆∞·ªùi d√πng bi·∫øt r·∫±ng ID ƒë√£ ƒë∆∞·ª£c sao ch√©p
    alert('ID ƒë√£ ƒë∆∞·ª£c sao ch√©p v√†o Clipboard!');
}

function copyToClipboard(text) {
    // T·∫°o m·ªôt th·∫ª textarea ·∫©n ƒë·ªÉ ch·ª©a vƒÉn b·∫£n c·∫ßn sao ch√©p
    var textarea = document.createElement('textarea');
    textarea.value = text;

    // Th√™m textarea v√†o trang web
    document.body.appendChild(textarea);

    // Ch·ªçn n·ªôi dung c·ªßa textarea
    textarea.select();

    // Th·ª±c hi·ªán thao t√°c sao ch√©p v√†o Clipboard
    document.execCommand('copy');

    // X√≥a textarea sau khi ƒë√£ sao ch√©p
    document.body.removeChild(textarea);
}

const orderData = {
    playerName: "User123",
};
let price;
function displayOrderDetails() {
    // Mock data, replace with actual data from your application
    const orderData = {
        playerName: "User123",
    };

    // L·∫•y gi√° tr·ªã t·ª´ data attributes c·ªßa option ƒë∆∞·ª£c ch·ªçn
    var selectedOption = document.getElementById("gameSelect").options[document.getElementById("gameSelect").selectedIndex];
    var gameName = selectedOption.getAttribute("data-name");
    price = selectedOption.getAttribute("data-price");
    price = parseFloat(price);
    const orderDetails = document.getElementById("order-details");
    const quantityInput = document.createElement("input");
    quantityInput.type = "number";
    quantityInput.min = "1";
    quantityInput.value = 1;
    quantityInput.id = "quantityInput";

    orderDetails.innerHTML = `
    <div style="display: flex; align-items: center; margin-bottom: 10px;">
        <img src="https://data-resize.lita.cool/user/12487481/album/photo_20231114_163248_624_R48916.jpg.resize/299*" alt="" style="width: 50px; height: 50px; border-radius: 50%; margin-right: 10px;">
        <p><strong>${orderData.playerName}</strong></p>
    </div>
    <div style="margin-bottom: 10px;">
        <p>D·ªãch V·ª•: ${gameName}</p>
        <p>ƒê∆°n Gi√°: ${price} üí∞/tr·∫≠n</p>
    </div>
    <div style="margin-bottom: 10px;">
        <p>S·ªë L∆∞·ª£ng: <input type="number" min="1" value="1" id="quantityInput"></p>
    </div>`;

    const totalValueElement = document.createElement("p");
    totalValueElement.id = "totalValue";
    orderDetails.appendChild(totalValueElement);

    document.getElementById("quantityInput").addEventListener("input", updateTotalValue);

    openModal();
    updateTotalValue();
}

function updateTotalValue() {
    const quantityInput = document.getElementById("quantityInput");
    const totalValueElement = document.getElementById("totalValue");
    const quantity = parseInt(quantityInput.value);

    if (!isNaN(quantity) && quantity >= 1) {
        const totalValue = quantity * price;
        totalValueElement.textContent = `T·ªïng Gi√° Tr·ªã: ${totalValue} üí∞`;
    }
}

function confirmOrder() {
    alert('ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!');
    closeModal();

    // Show a success feedback pop-up
    const feedbackPopup = document.createElement("div");
    feedbackPopup.innerHTML = "<p>ƒê√£ ƒë·∫∑t th√†nh c√¥ng!</p>";
    feedbackPopup.style.position = "fixed";
    feedbackPopup.style.top = "50%";
    feedbackPopup.style.left = "50%";
    feedbackPopup.style.transform = "translate(-50%, -50%)";
    feedbackPopup.style.backgroundColor = "#4CAF50";
    feedbackPopup.style.color = "#fff";
    feedbackPopup.style.padding = "15px";
    feedbackPopup.style.borderRadius = "10px";
    document.body.appendChild(feedbackPopup);

    // Automatically close the feedback pop-up after 3 seconds
    setTimeout(() => {
        document.body.removeChild(feedbackPopup);
    }, 3000);
    // Th√™m h√†m n√†y ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë ng∆∞·ªùi theo d√µi v√† s·ªë xu
    function updateStats() {
        // Gi·∫£ s·ª≠ b·∫°n c√≥ c√°c bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ s·ªë ng∆∞·ªùi theo d√µi v√† s·ªë xu
        const followersCount = 200;
        const coinsCount = 1000;
        const followingCount = 100
        // C·∫≠p nh·∫≠t c√°c ph·∫ßn t·ª≠ HTML
        document.getElementById('followersCount').innerText = followersCount;
        document.getElementById('coinsCount').innerText = coinsCount;
    }

    // G·ªçi h√†m updateStats khi trang web t·∫£i xong
    document.addEventListener('DOMContentLoaded', updateStats);
}

document.getElementById("gameSelect").addEventListener("change", function () {
    // L·∫•y gi√° tr·ªã t·ª´ data attributes c·ªßa option ƒë∆∞·ª£c ch·ªçn
    selectedOption = this.options[this.selectedIndex];
    var imageSource = selectedOption.getAttribute("data-image");
    var gameName = selectedOption.getAttribute("data-name");
    var price = selectedOption.getAttribute("data-price");

    // Hi·ªÉn th·ªã th√¥ng tin c·ªßa game ƒë∆∞·ª£c ch·ªçn
    document.getElementById("gameImage").src = imageSource;
    document.getElementById("gameName").textContent = "T√™n Game: " + gameName;
    document.getElementById("gamePrice").textContent = "ƒê∆°n gi√°: " + price;
});

// Hi·ªÉn th·ªã th√¥ng tin khi trang web ƒë∆∞·ª£c t·∫£i
window.onload = function () {
    // M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã th√¥ng tin c·ªßa game ƒë·∫ßu ti√™n
    document.getElementById("gameImage").src = document.getElementById("gameSelect").options[0].getAttribute("data-image");
    document.getElementById("gameName").textContent = "T√™n Game: " + document.getElementById("gameSelect").options[0].getAttribute("data-name");
    document.getElementById("gamePrice").textContent = "ƒê∆°n gi√°: " + document.getElementById("gameSelect").options[0].getAttribute("data-price");
};

// Show modal function
function openModal() {
    document.getElementById('confirmationModal').style.display = 'flex';
}

function closeModal() {
    document.getElementById('confirmationModal').style.display = 'none';
}